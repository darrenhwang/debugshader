CCEffect %{
  techniques:
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        mainTexture: { value: white }
        noiseTexture: { value: white }
        baseColor: { value: [1.0, 0.3, 0.0, 1.0], editor: { type: color } }
        tipColor: { value: [1.0, 0.7, 0.0, 1.0], editor: { type: color } }
        innerColor: { value: [1.0, 0.5, 0.0, 1.0], editor: { type: color } }
        outerColor: { value: [1.0, 0.2, 0.0, 1.0], editor: { type: color } }
        pulseColor: { value: [1.0, 0.8, 0.0, 1.0], editor: { type: color } }
        gradientStrength: { value: 1.0, editor: { type: float, range: [0.0, 2.0], slide: true } }
        waveSpeed: { value: 1.0, editor: { type: float, range: [0.0, 5.0], slide: true } }
        waveScale: { value: 1.0, editor: { type: float, range: [0.0, 2.0], slide: true } }
        distortionStrength: { value: 0.1, editor: { type: float, range: [0.0, 0.5], slide: true } }
        innerFlameScale: { value: 0.8, editor: { type: float, range: [0.0, 1.0], slide: true } }
        noiseScale: { value: 1.0, editor: { type: float, range: [0.1, 5.0], slide: true } }
        noiseSpeed: { value: 0.5, editor: { type: float, range: [0.0, 2.0], slide: true } }
        pulseSpeed: { value: 2.0, editor: { type: float, range: [0.0, 5.0], slide: true } }
        pulseScale: { value: 0.2, editor: { type: float, range: [0.0, 1.0], slide: true } }
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec2 v_uv0;
  out vec4 v_color;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matWorld * pos;
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;
    return pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv0;
  in vec4 v_color;

  uniform sampler2D mainTexture;
  uniform sampler2D noiseTexture;
  uniform Constant {
    vec4 baseColor;
    vec4 tipColor;
    vec4 innerColor;
    vec4 outerColor;
    vec4 pulseColor;
    float gradientStrength;
    float waveSpeed;
    float waveScale;
    float distortionStrength;
    float innerFlameScale;
    float noiseScale;
    float noiseSpeed;
    float pulseSpeed;
    float pulseScale;
  };

  // 改进的噪声函数
  float noise(vec2 uv) {
    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);
  }

  // 采样噪声纹理
  float sampleNoise(vec2 uv, float time) {
    vec2 noiseUV = uv * noiseScale + vec2(time * noiseSpeed, 0.0);
    return texture(noiseTexture, noiseUV).r;
  }

  vec4 frag () {
    float time = cc_time.x * waveSpeed;
    float pulseTime = cc_time.x * pulseSpeed;
    
    // 计算扭曲
    vec2 distortedUV = v_uv0;
    float noiseVal = sampleNoise(v_uv0, time);
    float noiseVal2 = noise(v_uv0 * 10.0 + time);
    distortedUV.x += sin(v_uv0.y * 8.0 + time) * distortionStrength * noiseVal;
    distortedUV.y += cos(v_uv0.x * 6.0 + time) * distortionStrength * noiseVal2;
    
    vec4 o = texture(mainTexture, distortedUV);
    o *= v_color;
    
    // 计算渐变
    float gradient = 1.0 - v_uv0.y;
    gradient = pow(gradient, gradientStrength);
    
    // 添加波浪动画
    float wave = sin(v_uv0.y * 10.0 + time) * 0.1 * waveScale;
    
    // 计算内焰和外焰
    float innerGradient = smoothstep(0.0, innerFlameScale, gradient);
    float outerGradient = smoothstep(innerFlameScale, 1.0, gradient);
    
    // 颜色混合
    vec4 innerFlame = mix(innerColor, tipColor, innerGradient);
    vec4 outerFlame = mix(baseColor, outerColor, outerGradient);
    vec4 flameColor = mix(outerFlame, innerFlame, innerGradient);
    
    // 添加脉冲效果
    float pulse = sin(pulseTime) * 0.5 + 0.5;
    flameColor = mix(flameColor, pulseColor, pulse * pulseScale);
    
    // 应用颜色和渐变
    o.rgb = flameColor.rgb;
    o.a *= flameColor.a * (gradient + wave) * (0.8 + noiseVal * 0.2);
    
    return o;
  }
}% 