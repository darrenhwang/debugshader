CCEffect %{
  techniques:
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      properties:
        mainTexture: { value: white }
        nextTexture: { value: white }  # 下一个场景的纹理
        progress: { value: 0.0, editor: { range: [0, 1.0], slide: true } }  # 转场进度
        centerX: { value: 0.5, editor: { range: [0, 1.0], slide: true } }  # 圆心X坐标
        centerY: { value: 0.5, editor: { range: [0, 1.0], slide: true } }  # 圆心Y坐标
        edgeWidth: { value: 0.1, editor: { range: [0, 0.5], slide: true } }  # 边缘宽度
        edgeColor: { value: [1.0, 1.0, 1.0], editor: { type: color } }  # 边缘颜色
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec2 v_uv0;
  out vec4 v_color;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matWorld * pos;
    pos = cc_matViewProj * pos;
    v_uv0 = a_texCoord;
    v_color = a_color;
    return pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  in vec2 v_uv0;
  in vec4 v_color;

  uniform sampler2D mainTexture;
  uniform sampler2D nextTexture;
  
  uniform Constant {
    float progress;
    float centerX;
    float centerY;
    float edgeWidth;
    vec3 edgeColor;
  };

  vec4 frag () {
    vec2 center = vec2(centerX, centerY);
    float dist = distance(v_uv0, center);
    
    // 计算圆形遮罩
    float mask = smoothstep(progress - edgeWidth, progress, dist);
    mask *= smoothstep(progress + edgeWidth, progress, dist);
    
    // 混合两个场景
    vec4 currentScene = texture(mainTexture, v_uv0);
    vec4 nextScene = texture(nextTexture, v_uv0);
    
    // 计算边缘发光
    float edge = smoothstep(progress - edgeWidth, progress, dist);
    edge *= (1.0 - smoothstep(progress, progress + edgeWidth, dist));
    
    // 混合颜色
    vec3 finalColor = mix(currentScene.rgb, nextScene.rgb, mask);
    finalColor = mix(finalColor, edgeColor, edge);
    
    // 计算透明度
    float alpha = mix(currentScene.a, nextScene.a, mask);
    
    return vec4(finalColor, alpha);
  }
}% 